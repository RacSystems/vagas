unit uClienteList;

interface

uses
  System.Generics.Collections, uCliente, System.SysUtils;

type
  TClienteList = class(TObjectList<TCliente>)
  public
    function BuscaPorID(AID: Integer): TCliente;
    function BuscarPorNome(const ANome: string): TList<TCliente>;
    function ProximoID: Integer;
  end;

implementation

function TClienteList.BuscaPorID(AID: Integer): TCliente;
var
  vCliente: TCliente;
begin
  for vCliente in Self do
    if vCliente.ID = AID then
      Exit(vCliente);
  Result := nil;
end;

function TClienteList.BuscarPorNome(const ANome: string): TList<TCliente>;
var
  vCliente: TCliente;
  vListResult: TList<TCliente>;
  vNomeBusca: string;
begin
  vListResult := TList<TCliente>.Create;
  Result := vListResult; // Atribui o resultado antes do loop

  vNomeBusca := LowerCase(ANome.Trim);

  // Se a busca for vazia, retorna a lista completa
  if vNomeBusca.IsEmpty then
  begin
    for vCliente in Self do
      vListResult.Add(vCliente);
  end
  else // Realiza a busca parcial
  begin
    for vCliente in Self do
      if Pos(vNomeBusca, LowerCase(vCliente.Nome)) > 0 then
        vListResult.Add(vCliente);
  end;
end;

function TClienteList.ProximoID: Integer;
var
  vMaxID: Integer;
  vCliente: TCliente;
begin
  vMaxID := 0;
  for vCliente in Self do
    if vCliente.ID > vMaxID then
      vMaxID := vCliente.ID;
  Result := vMaxID + 1;
end;

end.
